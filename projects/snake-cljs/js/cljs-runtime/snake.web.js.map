{"version":3,"sources":["snake/web.cljs"],"mappings":"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","names":["snake.web/grid-size","snake.web/game-clock","snake.web/canvas","js/document","snake.web/canvas-ctx","snake.web/score-txt","snake.web/start-button","snake.web/game-over-text","js/snake","js/snake.web","js/snake.web.game-state","snake.web/game-state","cljs.core.atom","js/snake.web.touch-state","snake.web/touch-state","snake.web/handle-keydown","event","temp__5804__auto__","direction","G__23613","p1__23612#","cljs.core.swap_BANG_","snake.game/change-direction","snake.web/get-current-touch-pos","touch-event","cljs.core/first","touch-x","touch-y","snake.web/handle-touch-start","p__23614","p__23615","vec__23616","cljs.core.nth","vec__23619","snake.web/get-touch-direction","x-start","y-start","x-end","y-end","x-diff","y-diff","cljs.core/abs","snake.web/handle-touch-move","cljs.core/deref","first-touch","p1__23622#","cljs.core/reset!","p__23623","vec__23624","snake.web/draw-block","x","y","block-width","block-height","snake.web/draw-food","food-pos","snake.web/draw-snake","snake","seq__23627","cljs.core/seq","chunk__23628","count__23629","i__23630","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","part","snake.web/clear-screen","snake.web/set-score-text","score","high-score","p__23631","map__23632","cljs.core/--destructure-map","cljs.core.get","snake.web/draw-game-state","food","cljs.core/quot","p__23633","map__23634","snake.web/game-over","js/localStorage","snake.web/game-loop","state","cljs.core/not","snake.game/get-next-state","js/setTimeout","snake.web/start-game","snake.game/get-initial-state","snake.web/get-current-high-score","or__5045__auto__","snake.web/init-game-screen","snake.web/-main"],"sourcesContent":["(ns snake.web\n  (:require [snake.game :as game])) \n\n;; Constants\n(def grid-size 50)\n(def game-clock 70)\n\n;; HTML Elements\n(def canvas (.getElementById js/document \"game-canvas\"))\n(def canvas-ctx (.getContext canvas \"2d\"))\n(def score-txt (.getElementById js/document \"score\"))\n(def start-button (.getElementById js/document \"start\"))\n(def game-over-text (.getElementById js/document \"game-over\"))\n\n;; Global states\n(defonce game-state (atom {}))\n(defonce touch-state (atom nil))\n\n;; Event handlers\n(defn handle-keydown\n  [event]\n  (when-let [direction (case (.-key event)\n                         \"ArrowLeft\" :left\n                         \"ArrowUp\" :up\n                         \"ArrowRight\" :right\n                         \"ArrowDown\" :down\n                         nil)]\n    (swap! game-state #(game/change-direction % direction))))\n\n(defn get-current-touch-pos\n  [event]\n  (let [touch-event (first (.-touches event))\n        touch-x (.-clientX touch-event)\n        touch-y (.-clientY touch-event)]\n    [touch-x touch-y]))\n\n(defn handle-touch-start\n  [event]\n  (swap! touch-state #(get-current-touch-pos event)))\n\n(defn get-touch-direction\n  [[x-start y-start] [x-end y-end]]\n  (let [x-diff (- x-start x-end)\n        y-diff (- y-start y-end)]\n    (if (> (abs x-diff) (abs y-diff))\n      (if (pos? x-diff) :left :right)\n      (if (pos? y-diff) :up :down))))\n\n(defn handle-touch-move\n  [event]\n  (when-let [first-touch @touch-state]\n    (let [direction (get-touch-direction first-touch (get-current-touch-pos event))]\n      (swap! game-state #(game/change-direction % direction))\n      (reset! touch-state nil))))\n\n;; UI handlers\n(defn draw-block\n  [[x y] block-width block-height]\n  (.fillRect canvas-ctx\n             (* x block-width)\n             (* y block-height)\n             block-width\n             block-height))\n\n(defn draw-food\n  [food-pos block-width block-height]\n  (set! (.-fillStyle canvas-ctx) \"rgb(255,0,0)\")\n  (draw-block food-pos block-width block-height))\n\n(defn draw-snake\n  [snake block-width block-height]\n  (set! (.-fillStyle canvas-ctx) \"rgb(0,0,0)\")\n  (doseq [part snake] (draw-block part block-width block-height)))\n\n(defn clear-screen\n  []\n  (set! (.-fillStyle canvas-ctx) \"rgb(255,255,255)\")\n  (.fillRect canvas-ctx 0 0 (.-width canvas) (.-height canvas)))\n\n(defn set-score-text\n  [score high-score]\n  (set! (.-innerHTML score-txt) (str \"Score: \" score \" - High Score: \" high-score)))\n\n(defn draw-game-state\n  [{:keys [snake food score high-score]}]\n  (let [block-width (quot (.-width canvas) grid-size)\n        block-height (quot (.-height canvas) grid-size)]\n    (clear-screen)\n    (draw-food food block-width block-height)\n    (draw-snake snake block-width block-height)\n    (set-score-text score high-score)))\n\n(defn game-over\n  [{:keys [high-score]}]\n  (set! (.-visibility (.-style game-over-text)) \"visible\")\n  (set! (.-disabled start-button) false)\n  (.setItem js/localStorage \"high-score\" high-score))\n\n(defn game-loop\n  []\n  (let [state @game-state]\n    (draw-game-state state)\n    (if (not (:dead state))\n      (do (swap! game-state game/get-next-state)\n          (js/setTimeout game-loop game-clock))\n      (game-over state))))\n\n(defn start-game\n  [high-score]\n  (swap! game-state #(game/get-initial-state grid-size high-score))\n  (set! (.-visibility (.-style game-over-text)) \"hidden\")\n  (set! (.-disabled start-button) true)\n  (game-loop))\n\n(defn get-current-high-score\n  []\n  (or (.getItem js/localStorage \"high-score\") 0))\n\n(defn init-game-screen\n  []\n  (let [high-score (get-current-high-score)]\n    (clear-screen)\n    (set-score-text 0 high-score)\n    (.addEventListener js/document \"keydown\" handle-keydown)\n    (.addEventListener js/document \"touchstart\" handle-touch-start)\n    (.addEventListener js/document \"touchmove\" handle-touch-move)\n    (set! (.-onclick start-button) #(start-game high-score))))\n\n(defn -main\n  []\n  (init-game-screen))\n"]}