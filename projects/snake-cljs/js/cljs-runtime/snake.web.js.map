{"version":3,"sources":["snake/web.cljs"],"mappings":"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","names":["snake.web/grid-size","snake.web/game-clock","snake.web/canvas","js/document","snake.web/canvas-ctx","snake.web/score-txt","snake.web/start-button","snake.web/game-over-text","js/snake","js/snake.web","js/snake.web.game-state","snake.web/game-state","cljs.core.atom","js/snake.web.touch-state","snake.web/touch-state","snake.web/change-direction-on-keydown","event","temp__5804__auto__","direction","G__11345","p1__11344#","cljs.core.swap_BANG_","snake.game/change-direction","snake.web/get-touch-pos","touch-event","cljs.core/first","touch-x","touch-y","snake.web/handle-touch-start","snake.web/handle-touch-move","state","cljs.core/deref","cljs.core/seq","vec__11348","cljs.core.nth","vec__11351","x-start","y-start","x","y","x-diff","y-diff","cljs.core/abs","p1__11347#","cljs.core/reset!","p__11354","vec__11355","snake.web/draw-block","block-width","block-height","snake.web/get-scores-display-text","score","high-score","snake.web/clear-screen","snake.web/set-score","p__11358","map__11359","cljs.core/--destructure-map","cljs.core.get","snake.web/draw-game-state","snake","food","cljs.core/quot","seq__11360","chunk__11361","count__11362","i__11363","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","part","snake.web/game-over","snake.web/game-loop","cljs.core/not","snake.game/get-next-state","js/setTimeout","snake.web/start-game","snake.game/get-initial-state","snake.web/init-game-screen","snake.web/-main"],"sourcesContent":["(ns snake.web\n  (:require [snake.game :as game])) \n\n;; Constants\n(def grid-size 50)\n(def game-clock 70)\n\n;; HTML Elements\n(def canvas (.getElementById js/document \"game-canvas\"))\n(def canvas-ctx (.getContext canvas \"2d\"))\n(def score-txt (.getElementById js/document \"score\"))\n(def start-button (.getElementById js/document \"start\"))\n(def game-over-text (.getElementById js/document \"game-over\"))\n\n;; Global states\n(defonce game-state (atom {}))\n(defonce touch-state (atom []))\n\n;; UI handlers\n(defn change-direction-on-keydown\n  [event]\n  (when-let [direction (case (.-key event)\n                         \"ArrowLeft\" :left\n                         \"ArrowUp\" :up\n                         \"ArrowRight\" :right\n                         \"ArrowDown\" :down\n                         nil)]\n    (swap! game-state #(game/change-direction % direction))))\n\n(defn- get-touch-pos\n  [event]\n  (let [touch-event (first (.-touches event))\n        touch-x (.-clientX touch-event)\n        touch-y (.-clientY touch-event)]\n    [touch-x touch-y]))\n\n(defn handle-touch-start\n  [event]\n  (swap! touch-state #(get-touch-pos event)))\n\n(defn handle-touch-move\n  [event]\n  (when-let [state (seq @touch-state)]\n    (let [[x-start y-start] state\n          [x y] (get-touch-pos event)\n          x-diff (- x-start x)\n          y-diff (- y-start y)\n          direction (if (> (abs x-diff) (abs y-diff))\n                      (if (pos? x-diff) :left :right)\n                      (if (pos? y-diff) :up :down))]\n      (swap! game-state #(game/change-direction % direction))\n      (reset! touch-state []))))\n\n(defn draw-block\n  [[x y] block-width block-height]\n  (.fillRect canvas-ctx\n             (* x block-width)\n             (* y block-height)\n             block-width\n             block-height))\n\n(defn get-scores-display-text\n  [score high-score]\n  (str \"Score: \" score \" - High Score: \" high-score))\n\n(defn clear-screen\n  []\n  (set! (.-fillStyle canvas-ctx) \"rgb(255,255,255)\")\n  (.fillRect canvas-ctx 0 0 (.-width canvas) (.-height canvas)))\n\n(defn set-score\n  [score high-score]\n  (set! (.-innerHTML score-txt) (get-scores-display-text score high-score)))\n\n(defn draw-game-state\n  [{snake :snake\n    food :food\n    score :score\n    high-score :high-score}]\n  (let [block-width (quot (.-width canvas) grid-size)\n        block-height (quot (.-height canvas) grid-size)]\n    (clear-screen)\n    (set! (.-fillStyle canvas-ctx) \"rgb(255,0,0)\")\n    (draw-block food block-width block-height)\n    (set! (.-fillStyle canvas-ctx) \"rgb(0,0,0)\")\n    (doseq [part snake] (draw-block part block-width block-height))\n    (set-score score high-score)))\n\n(defn game-over\n  []\n  (set! (.-hidden game-over-text) false)\n  (set! (.-disabled start-button) false))\n\n(defn game-loop\n  []\n  (let [state @game-state]\n    (draw-game-state state)\n    (cond (not (:dead state))\n          (do (swap! game-state game/get-next-state)\n              (js/setTimeout game-loop game-clock))\n          :else (game-over))))\n\n(defn start-game\n  []\n  (let [high-score (get @game-state :high-score 0)]\n    (swap! game-state #(game/get-initial-state grid-size high-score))\n    (set! (.-hidden game-over-text) true)\n    (set! (.-disabled start-button) true)\n    (game-loop)))\n\n(defn init-game-screen\n  []\n  (clear-screen)\n  (set-score 0 0)\n  (.addEventListener js/document \"keydown\" change-direction-on-keydown)\n  (.addEventListener js/document \"touchstart\" handle-touch-start)\n  (.addEventListener js/document \"touchmove\" handle-touch-move)\n  (set! (.-onclick start-button) start-game))\n\n(defn -main\n  []\n  (init-game-screen))\n"]}