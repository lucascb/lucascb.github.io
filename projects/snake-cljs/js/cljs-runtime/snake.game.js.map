{"version":3,"sources":["snake/game.cljs"],"mappings":"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","names":["snake.game/get-next-food-pos","grid-size","snake","all-pos","cljs.core/set","iter__5523__auto__","s__20746","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__20748","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__20750","cljs.core/chunk-buffer","i__20749","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__20747","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__20745","x","cljs.core.range","y","clojure.set.difference","cljs.core/vec","cljs.core/rand-nth","p__20769","vec__20770","cljs.core.nth","snake.game/get-next-pos","direction","G__20773","cljs.core/Keyword","js/Error","snake.game/will-get-food?","food","cljs.core._EQ_","cljs.core/peek","snake.game/eat","state","map__20775","cljs.core/--destructure-map","cljs.core.get","score","growed-snake","cljs.core.conj","cljs.core.assoc","snake.game/move","map__20785","snake.game/eat-or-move","map__20786","p__20801","map__20802","snake.game/outside-screen?","vec__20803","p__20811","map__20812","snake.game/self-collided?","snake-head","cljs.core/boolean","p1__20809#","cljs.core/some","cljs.core/butlast","snake.game/check-dead","snake.game/update-high-score","x__5130__auto__","y__5131__auto__","snake.game/get-next-state","snake.game/get-initial-state","high-score","mid-screen","snake.game/change-direction","new-direction","forbidden-moves","cljs.core/contains?","cljs.core/chunk-first"],"sourcesContent":["(ns snake.game\n  (:require [clojure.set :as set]))\n\n(defn get-next-food-pos\n  [grid-size snake]\n  (let [all-pos (set (for [x (range grid-size)\n                           y (range grid-size)]\n                       [x y]))]\n    (->> snake\n         set\n         (set/difference all-pos)\n         vec\n         rand-nth)))\n\n(defn get-next-pos\n  [[x y] direction]\n  (case direction\n    :right [(inc x) y]\n    :left [(dec x) y]\n    :up [x (dec y)]\n    :down [x (inc y)]))\n\n(defn will-get-food?\n  [snake direction food]\n  (= food (get-next-pos (peek snake) direction)))\n\n(defn eat\n  [state]\n  (let [{grid-size :grid-size\n         snake :snake\n         food :food\n         score :score} state\n        growed-snake (conj snake food)]\n    (assoc state\n           :snake growed-snake\n           :food (get-next-food-pos grid-size growed-snake)\n           :score (inc score))))\n\n(defn move\n  [state]\n  (let [{snake :snake\n         direction :direction} state]\n    (assoc state\n           :snake (conj (vec (rest snake))\n                        (get-next-pos (peek snake) direction)))))\n\n(defn eat-or-move\n  [state]\n  (let [{snake :snake\n         direction :direction\n         food :food} state]\n    (cond (will-get-food? snake direction food)\n          (eat state)\n          :else (move state))))\n\n(defn outside-screen?\n  [{grid-size :grid-size snake :snake}]\n  (let [[x y] (peek snake)]\n    (not (and (< 0 x grid-size)\n              (< 0 y grid-size)))))\n\n(defn self-collided?\n  [{snake :snake}]\n  (let [snake-head (peek snake)]\n    (boolean (some #(= % snake-head)\n                   (butlast snake)))))\n\n(defn check-dead\n  [state]\n  (assoc state\n         :dead (or (outside-screen? state)\n                   (self-collided? state))))\n\n(defn update-high-score\n  [state]\n  (assoc state :high-score (cond (:dead state)\n                                 (max (:score state) (:high-score state))\n                                 :else (:high-score state))))\n\n(defn get-next-state\n  [state]\n  (-> state\n      eat-or-move\n      check-dead\n      update-high-score))\n\n(defn get-initial-state\n  [grid-size high-score]\n  (let [mid-screen (/ grid-size 2)\n        snake [[mid-screen mid-screen]]]\n    {:grid-size grid-size\n     :snake snake\n     :direction :right\n     :food (get-next-food-pos grid-size snake)\n     :score 0\n     :high-score high-score\n     :dead false}))\n\n(defn change-direction\n  [state new-direction]\n  (let [forbidden-moves #{[:up :down]\n                          [:down :up]\n                          [:left :right]\n                          [:right :left]}]\n    (cond (not (contains? forbidden-moves\n                          [(:direction state) new-direction]))\n          (assoc state :direction new-direction)\n          :else state)))\n"]}