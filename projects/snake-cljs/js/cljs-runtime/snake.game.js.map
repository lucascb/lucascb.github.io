{"version":3,"sources":["snake/game.cljs"],"mappings":"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","names":["snake.game/forbidden-moves","snake.game/get-initial-snake","grid-size","snake-size","mid-screen","cljs.core/quot","cljs.core.range","cljs.core/reverse","p1__23591#","cljs.core.mapv","cljs.core/PersistentVector","snake.game/get-next-food-pos","snake","all-pos","cljs.core/set","iter__5523__auto__","s__23593","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__23595","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__23597","cljs.core/chunk-buffer","i__23596","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23594","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__23592","x","y","clojure.set.difference","cljs.core/vec","cljs.core/rand-nth","p__23598","vec__23599","cljs.core.nth","snake.game/get-next-pos","direction","G__23602","cljs.core/Keyword","js/Error","cljs.core/mod","snake.game/will-get-food?","food","cljs.core._EQ_","cljs.core/peek","snake.game/eat","state","map__23603","cljs.core/--destructure-map","cljs.core.get","score","growed-snake","cljs.core.conj","cljs.core.assoc","snake.game/move","map__23604","snake.game/eat-or-move","map__23605","p__23607","map__23608","snake.game/self-collided?","snake-head","cljs.core/boolean","p1__23606#","cljs.core/some","cljs.core/butlast","snake.game/check-dead","snake.game/update-high-score","x__5130__auto__","y__5131__auto__","snake.game/get-next-state","snake.game/get-initial-state","high-score","snake.game/change-direction","new-direction","cljs.core/contains?","cljs.core/chunk-first"],"sourcesContent":["(ns snake.game\n  (:require [clojure.set :as set]))\n\n(def ^:private forbidden-moves #{[:up :down]\n                                 [:down :up]\n                                 [:left :right]\n                                 [:right :left]})\n\n(defn- get-initial-snake\n  [grid-size snake-size]\n  (let [mid-screen (quot grid-size 2)]\n    (->> snake-size\n         range\n         reverse\n         (mapv #(vector (- mid-screen %) mid-screen)))))\n\n(defn- get-next-food-pos\n  [grid-size snake]\n  (let [all-pos (set (for [x (range grid-size)\n                           y (range grid-size)]\n                       [x y]))]\n    (->> snake\n         set\n         (set/difference all-pos)\n         vec\n         rand-nth)))\n\n(defn- get-next-pos\n  [[x y] direction grid-size]\n  (case direction\n    :right [(mod (inc x) grid-size) y]\n    :left [(mod (dec x) grid-size) y]\n    :up [x (mod (dec y) grid-size)]\n    :down [x (mod (inc y) grid-size)]))\n\n(defn- will-get-food?\n  [snake direction food grid-size]\n  (= food (get-next-pos (peek snake) direction grid-size)))\n\n(defn- eat\n  [state]\n  (let [{:keys [grid-size snake food score]} state\n        growed-snake (conj snake food)]\n    (assoc state\n           :snake growed-snake\n           :food (get-next-food-pos grid-size growed-snake)\n           :score (inc score))))\n\n(defn- move\n  [state]\n  (let [{:keys [snake direction grid-size]} state]\n    (assoc state\n           :snake (conj (vec (rest snake))\n                        (get-next-pos (peek snake) direction grid-size)))))\n\n(defn- eat-or-move\n  [state]\n  (let [{:keys [snake direction food grid-size]} state]\n    (if (will-get-food? snake direction food grid-size)\n      (eat state)\n      (move state))))\n\n(defn- self-collided?\n  [{snake :snake}]\n  (let [snake-head (peek snake)]\n    (boolean (some #(= % snake-head)\n                   (butlast snake)))))\n\n(defn- check-dead\n  [state]\n  (assoc state :dead (self-collided? state)))\n\n(defn- update-high-score\n  [state]\n  (assoc state :high-score (cond (:dead state)\n                                 (max (:score state) (:high-score state))\n                                 :else (:high-score state))))\n\n(defn get-next-state\n  [state]\n  (-> state\n      eat-or-move\n      check-dead\n      update-high-score))\n\n(defn get-initial-state\n  [grid-size high-score]\n  (let [snake (get-initial-snake grid-size 5)]\n    {:grid-size grid-size\n     :snake snake \n     :direction :right\n     :food (get-next-food-pos grid-size snake)\n     :score 0\n     :high-score high-score\n     :dead false}))\n\n(defn change-direction\n  [state new-direction]\n  (if (not (contains? forbidden-moves [(:direction state) new-direction]))\n    (assoc state :direction new-direction)\n    state))\n"]}