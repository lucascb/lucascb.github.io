{"version":3,"sources":["minesweeper_cljs/views.cljs"],"mappings":";AAKA,0CAAA,1CAAMA,4FACHC,SAASC,EAAEC,EAAEC;AADhB,AAEE,QAAA,cAAmB,2IAAA,GAAA,0GAAA,oBAAA,yDAAA,qBAAA,AAAA,xVAAM,GAAK,mCAAA,nCAACC,0BAAUJ,4FAAUC,EAAEC,mBAC5B,iDAAA,jDAACG,6CAAEF,iFACH,iDAAA,jDAACE,6CAAEF;;;AAG9B,qCAAA,rCAAMG,kFACHH;AADH,AAEE,GAAI,iDAAA,jDAACE,6CAAEF;AAAP,0FAAA,mDAAA,2CAAA,oDAAA;;AAA2CA;;;AAE7C,sCAAA,tCAAMI,oFACHP,SAASQ,MAAMC,iBAAWR,EAAEC,EAAEC;AADjC,AAAA,2BAAA,mFAAA,iDAAA,mFAAA,yDAAA,2CAAA,kHAAA,6DAAA,vHAIgB,AAACJ,wCAAiBC,SAASC,EAAEC,EAAEC;AAJ/C,AAKoB,8BAAA,mFAAA,iEAAA,3KAACO,8PAAgCT,EAAEC;GALvD,4EAM0B,WAAKS;AAAL,AACE,AAAiBA;;AACjB,8BAAA,mFAAA,8DAAA,xKAACD,2PAA8BT,EAAEC;GAR7D,8DASmBO,yBACX,8KAAA,mIAAA,mFAAA,mDAAA,2CAAA,oDAAA,2BAAA,AAAA,/iBAAM,mCAAA,nCAACL,0BAAUJ,4FAAUC,EAAEC,YAAI,AAACI,mCAAYH,OACxC,gCAAA,hCAACC,0BAAUI,yFAAOP,EAAEC;mBAXlC,2CAAA,oDAES,6CAAKD,+CAAEC;;AAYhB,mCAAA,nCAAMU,8EACHZ,SAASQ,MAAMC,iBAAWR,EAAEY;AAD/B,AAAA,2BAAA,mFAAA,kDAEiB,oDAAA,WAAAC,iBAAAC,hFAACC;AAAD,AAAc,6EAAAF,iBAAAC,vFAACR,oCAAaP,SAASQ,MAAMC,iBAAWR;gBAFvE,2CAAA,oDAESA,5GAAuEY;;AAEhF,oCAAA,pCAAMI,gFACHC,KAAKlB,SAASQ,MAAMC;AADvB,AAAA,0FAAA,uDAAA,mFAAA,sDAEkB,oDAAA,WAAAU,iBAAAC,hFAACJ;AAAD,AAAc,wEAAAG,iBAAAC,lFAACR,iCAAUZ,SAASQ,MAAMC;GAAkBS;;AAE5E,qCAAA,rCAAMG,kFACHZ,iBAAWa,WAAKC;AADnB,AAAA,0FAAA,8CAEM,kBAAId,kBACF,8BAAA,WAAA,vBAAIa,oCACJ,8DAAA,jBAAKC;;AAEb,sCAAA,tCAAMC;AAAN,AAAA,0FAAA,mDAAA,2CAAA,kDAAA,uBAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAGwB,8BAAA,mFAAA,1GAACd;WAHzB;;AAKA,oCAAA,pCAAMe;AAAN,AACE,IAAAC,aAAA,AAAAC,gBAKmB,sDAAA,mFAAA,zIAACG;IALpBJ,iBAAA,AAAAE,4BAAAF;WAAA,AAAAG,4CAAAH,eAAA,lEAAOR;YAAP,AAAAW,4CAAAH,eAAA,nEACOlB;eADP,AAAAqB,4CAAAH,eAAA,tEAEO1B;sBAFP,AAAA6B,4CAAAH,eAAA,7EAGOH;uBAHP,AAAAM,4CAAAH,eAAA,9EAIOjB;iBAJP,AAAAoB,4CAAAH,eAAA,xEAKOJ;AALP,AAAA,0FAAA,mDAAA,2CAAA,kDAAA,kBAAA,mFAAA,mDAAA,mFAAA,kDAAA,sBAAA,mFAAA,8CAAA,0JAAA,kKAAA,0KAAA,zPAYIL,kCAAWC,KAAKlB,SAASQ,MAAMC,4GAC/BY,mCAAYZ,iBAAWa,WAAKC,2GAC5BC","names":["minesweeper-cljs.views/get-button-class","revealed","i","j","col","cljs.core/contains?","cljs.core._EQ_","minesweeper-cljs.views/convert-col","minesweeper-cljs.views/table-column","flags","game-over?","re-frame.core/dispatch","e","minesweeper-cljs.views/table-row","row","p1__24643#","p2__24644#","cljs.core.map_indexed","minesweeper-cljs.views/game-table","grid","p1__24645#","p2__24646#","minesweeper-cljs.views/game-status","won?","remaining-flags","minesweeper-cljs.views/reset-button","minesweeper-cljs.views/main-panel","map__24647","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","re_frame.core.subscribe"],"sourcesContent":["(ns minesweeper-cljs.views\n  (:require\n   [re-frame.core :as re-frame]\n   [minesweeper-cljs.subs :as subs]))\n\n(defn get-button-class\n  [revealed i j col]\n  (str \"grid-button\" (cond (not (contains? revealed [i j])) \"\"\n                           (= col :mine) \" grid-button-mine\"\n                           (= col 0) \" grid-button-empty\"\n                           :else \" grid-button-number\")))\n\n(defn convert-col\n  [col]\n  (if (= col :mine) [:img {:src \"mine.png\"}] col))\n\n(defn table-column\n  [revealed flags game-over? i j col]\n  ^{:key (str i j)}\n  [:td [:button\n        {:class (get-button-class revealed i j col)\n         :on-click #(re-frame/dispatch [:select-pos [i j]])\n         :on-context-menu (fn [e]\n                            (.preventDefault e)\n                            (re-frame/dispatch [:flag-pos [i j]]))\n         :disabled game-over?}\n        (cond (contains? revealed [i j]) (convert-col col)\n              (contains? flags [i j]) [:img {:src \"flag.png\"}]\n              :else \"\")]])\n\n(defn table-row\n  [revealed flags game-over? i row]\n  ^{:key i} [:tr (map-indexed #(table-column revealed flags game-over? i %1 %2) row)])\n\n(defn game-table\n  [grid revealed flags game-over?]\n  [:table [:tbody (map-indexed #(table-row revealed flags game-over? %1 %2) grid)]])\n\n(defn game-status\n  [game-over? won? remaining-flags]\n  [:p (if game-over?\n        (if won? \"You won!\" \"You lost!\")\n        (str remaining-flags \" flags remaining\"))])\n\n(defn reset-button\n  []\n  [:div {:id \"reset-button\"}\n   [:button {:on-click #(re-frame/dispatch [:reset-db])} \"Reset\"]])\n\n(defn main-panel []\n  (let [{grid :grid\n         flags :flags\n         revealed :revealed\n         remaining-flags :remaining-flags\n         game-over? :game-over\n         won? :won} @(re-frame/subscribe [::subs/game-state])]\n    [:div {:id \"content\"}\n     [:div\n      [:h1 \"Minesweeper\"]\n      [:p \"Instructions: Left-click to reveal position and right-click to place a flag. \n           Place all flags where there is a mine to win.\"]\n      ]\n     [game-table grid revealed flags game-over?]\n     [game-status game-over? won? remaining-flags]\n     [reset-button]\n     ]))\n"]}